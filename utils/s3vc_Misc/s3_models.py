import uuid

from datetime import datetime
from dateutil import parser

from pydantic import BaseModel, Field
from pydantic import model_validator
from typing import Optional, Dict, List, Union, Tuple, Any


#---------------
# Input Class
#---------------
class S3_BaseModel(BaseModel):
    uuid: str = Field(default_factory=lambda: str(uuid.uuid4()))
    date: Optional[Union[datetime, str]] = Field(None) 
    description: Optional[str]= Field(None, max_length=1600)

    @model_validator(mode='before')
    def validate_BaseAsset(cls, values):    
        date = values.get('date')
        if date is None:
            values['date'] = datetime.now().strftime('%Y-%m-%d')
        elif type(date) in [datetime]:
            values['date'] = date.strftime('%Y-%m-%d')
        else:
            try:
                parsed_date = parser.parse(date)
                values['date'] = parsed_date.strftime('%Y-%m-%d')
            except:
                raise ValueError('Invalid date format. Try inputing in YYYY-MM-DD')
        return values
    


#--- Category 1: Purchased goods & services 
class S3C1_PurchasedGoods(S3_BaseModel):
    """ 
    NO EMISSION FACTORS REQUIRED FROM BACKEND
    """
    product_name: str
    product_class: str = Field(default='Purchased Goods')
    supplier_name: str

    purchased_quantity: Optional[float] = Field(None, ge=0)
    quantity_unit: Optional[str] = Field(default='kg')
    quantity_emission_factor: Optional[float] = Field(None, description='Emission per item')

    supplier_incurred_emissions: Optional[float] = Field(None, ge=0, description='Estimated emissions generated by supplier for producing and delivering all purchase goods')

    @model_validator(mode='before')
    def validate_s3c1(cls, values):
        values['product_class'] = 'Purchased Goods'

        purchased_quantity = values.get('purchased_quantity')
        quantity_unit = values.get('quantity_unit')
        quantity_emission_factor = values.get('quantity_emission_factor')
        supplier_incurred_emissions = values.get('supplier_incurred_emissions')

        supported_unit = ['kg', 'litre', 'm3', 'count', None]
        if quantity_unit is not None and quantity_unit.lower() not in supported_unit:
            raise ValueError(f'Invalid quantity unit. Supported unit {supported_unit}') 
        
        if purchased_quantity and (quantity_emission_factor is None and supplier_incurred_emissions is None):
            raise ValueError("Either 'quantity_emission_factor' or 'supplier_incurred_emissions' must be provided when 'purchased_quantity' is specified.")

        return values



#--- Category 2 : Capital goods 
class S3C2_CapitalGoods(S3_BaseModel):
    """ 
    Same as C1. Only difference is product classification. 
    Blender will be considered capital goods as it is income generating item. 

    NO EMISSION FACTORS REQUIRED FROM BACKEND
    """
    product_name: str
    product_class: str = Field(default='Capital Goods')
    supplier_name: str

    purchased_quantity: Optional[float] = Field(None, ge=0)
    quantity_unit: Optional[str] = Field(default='kg')
    quantity_emission_factor: Optional[float] = Field(None, description='Emission per item')

    supplier_incurred_emissions: Optional[float] = Field(None, ge=0, description='Estimated emissions generated by supplier for producing and delivering all capital goods')

    @model_validator(mode='before')
    def validate_s3c1(cls, values):
        values['product_class'] = 'Capital Goods'

        purchased_quantity = values.get('purchased_quantity')
        quantity_unit = values.get('quantity_unit')
        quantity_emission_factor = values.get('quantity_emission_factor')
        supplier_incurred_emissions = values.get('supplier_incurred_emissions')

        supported_unit = ['kg', 'litre', 'm3', 'count', None]
        if quantity_unit is not None and quantity_unit.lower() not in supported_unit:
            raise ValueError(f'Invalid quantity unit. Supported unit {supported_unit}') 
        
        if purchased_quantity and (quantity_emission_factor is None and supplier_incurred_emissions is None):
            raise ValueError("Either 'quantity_emission_factor' or 'supplier_incurred_emissions' must be provided when 'purchased_quantity' is specified.")

        return values
    


#-- Category 3 : Fuel- & energy-related activities (excluded in Scope 1 & 2)
class S3C3_EnergyRelated(S3_BaseModel):
    """ 
    WARNING: NOT APPLICABLE if Scope 2 emission factors provided EQUALS life_cycle_emission_factor.

    upstream_emission_factor:
      Placeholder metric for calculating S3C3 emissions. (Upstream * usage)
      Eq: Lifecycle - combustion - loss

    lifecycle_emission_factor:
      Emissions from extraction, production, transportation, and consumption. 

    combustion_emission_factor:
      Emissions associated with combustion of other sources of fuel to create electric/heat/cooling. 

    loss_rate: 
      https://data.worldbank.org/indicator/EG.ELC.LOSS.ZS?order=wbapi_data_value_2009+wbapi_data_value+wbapi_data_value-last&sort=desc
      Avg 9% worldwide. Subtract ONLY if they have been included within lifecycle emission factor!

    NO EMISSION FACTORS REQUIRED FROM BACKEND (because user only fill this field when there are dispute in emission factors)
    """
    supplier_name: str
    state: Optional[str] = Field(default=None)
    country: Optional[str] = Field(default='Malaysia', max_length=35)

    # fuel_use: Optional[float] = Field(None, ge=0)
    # fuel_type: Optional[str] = Field(default='Diesel')
    # fuel_unit: Optional[str] = Field(default='litre')
    
    electric_use: Optional[float] = Field(None, ge=0)
    grid_emission_factor: Optional[float] = Field(default=0.776, ge=0)

    upstream_emission_factor: Optional[float] = Field(None, description='Lifecycle - combustion - loss')
    life_cycle_emission_factor: Optional[float] = Field(None, description='Emissions factor from extraction, production, transportation, and consumption.')
    combustion_emission_factor: Optional[float] = Field(None, description='Emission factor associated to combustion')
    energy_loss_rate: Optional[float] = Field(None, ge=0, le=1, description='Ratio of energy loss during transporting. Percent not supported due to ambiguity.')



#-- Category 4 : Upstream transportation & distribution
class S3C4_UpstreamTransport(S3_BaseModel):
    """ 
    Skipped refrigerant leakage & spend based calculation. Unreliable and a clusterfuck.

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. freight + distance (weight * distance * factor)
    2. fuel type + fuel use (use * factor)
    """ 
    supplier_name: str
    #address_from: Optional[str] = Field(default=None) # no reliable way of inferring distance #
    #address_to: Optional[str] = Field(default=None)

    travel_mode: str = Field(default='Land')
    freight_type: str = Field(default='Truck')
    freight_weight: Optional[float] = Field(ge=0, description='Weight in tons')

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_type: Optional[str] = Field(default='Diesel', description='Applicable to liquid fuel only')
    fuel_unit: Optional[str] = Field(default='litre')

    distance_traveled: Optional[float] = Field(ge=0)
    distance_unit: Optional[str] = Field(default='km')

    @model_validator(mode='before')
    def validate_s3c4(cls, values):
        travel_mode = values.get('travel_mode')
        distance_unit = values.get('distance_unit')

        # validate travel mode
        valid_travel_modes = ['rail', 'land', 'air', 'water', None]
        if travel_mode is not None and travel_mode.lower() not in valid_travel_modes:
            raise ValueError(f'Invalid travel mode. Must be within {valid_travel_modes}')
        
        # validate distance unit
        supported_distance_unit = ['km', None]
        if distance_unit is not None and distance_unit.lower() not in supported_distance_unit:
            raise ValueError(f'Invalid distance unit. Supported distance unit {supported_distance_unit}')
        
        return values



#-- Category 5 : Waste generated in operations
class S3C5_WasteGenerated(S3_BaseModel):
    """ 
    Only applies for waste created during operation. Sold products counted in Category 12 EOL treatment

    EMISSION FACTORS REQUIRED FROM BACKEND (waste type, quantity, treatment method)
    """
    waste_type: str = Field(default='plastic')
    waste_quantity: float = Field(ge=0)
    waste_state: str = Field(default='solid')
    waste_unit: str = Field(default='kg')

    waste_treatment_method: Optional[str] = Field(default='Recycled')
    waste_treatment_provider: Optional[str] = Field(None)

    @model_validator(mode='before')
    def validate_s3c7(cls, values):
        waste_state = values.get('waste_state')
        waste_unit = values.get('waste_unit')

        valid_state = ['solid', 'liquid', 'gas']
        if waste_state is not None and waste_state.lower() not in valid_state:
            raise ValueError(f'Invalid waste state. Must be within {valid_state}')
        
        supported_unit = ['kg', 'm3', 'litre', None]
        if waste_unit is not None and waste_unit.lower() not in supported_unit:
            raise ValueError(f'Invalid waste unit. Supported unit {supported_unit}')
  
        return values



#-- Category 6 : Business and air travel
class S3C6_1_BusinessTravel(S3_BaseModel):       
    """ 
    Not to be confused with C7 employee commute. C6 only refers to trips that are optional. 
    If vehicle emission factor is by passenger (Plane, rail), each passenger files separately (IE: duplicate the entries for plane). 
    If vehicle emission factor is by vehicle, passenger count does not matter. 

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. Mode >> vehicle >> distance
    2. fuel type >> consumption
    """
    branch: Optional[str] = Field(None, max_length=1600)

    travel_mode: str = Field(default='Land') 
    vehicle_type: Optional[str] = Field(default='Car', description='If vehicle emission factor is by passenger (Plane, rail), each passenger files separately (IE: duplicate the entries for plane).')

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_type: Optional[str] = Field(default='petrol', description='Supports only liquid fuels')
    fuel_unit: Optional[str] = Field(default='litre')

    distance_traveled: Optional[float] = Field(None, ge=0)
    distance_unit: Optional[str] = Field(default='km')
    reported_emissions: Optional[float] = Field(None, ge=0, description='')

    @model_validator(mode='before')
    def validate_s3c6(cls, values):
        travel_mode = values.get('travel_mode')
        fuel_unit = values.get('fuel_unit')
        distance_unit = values.get('distance_unit')

        # validate travel mode
        valid_travel_modes = ['foot', 'rail', 'land', 'air', 'water', None]
        if travel_mode is not None and travel_mode.lower() not in valid_travel_modes:
            raise ValueError(f'Invalid travel mode. Must be within {valid_travel_modes}')
        
        # validate fuel unit
        supported_fuel_unit = ['litre', None]
        if fuel_unit is not None and fuel_unit.lower() not in supported_fuel_unit:
            raise ValueError(f'Invalid fuel unit. Supported units in {supported_fuel_unit}')
        
        # validate distance unit
        supported_distance_unit = ['km', None]
        if distance_unit is not None and distance_unit.lower() not in supported_distance_unit:
            raise ValueError(f'Invalid distance unit. Supported distance unit {supported_distance_unit}')
        
        return values


class S3C6_2_BusinessStay(S3_BaseModel):
    """ 
    NO EMISSION FACTORS REQUIRED FROM BACKEND (unrealistic to store the factors for every hotel that exists, better to let user input themselves)
    """
    address: Optional[str] = Field(None)
    lat: Optional[float] = Field(None)
    lon: Optional[float] = Field(None)

    no_of_nights: int = Field(ge=0)
    hotel_emission_factor: Optional[float] = Field(None, ge=0, description='Expedia may have those numbers')
    reported_emissions: Optional[float] = Field(None, ge=0, description='')



#-- Category 7 : Employee commuting
class S3C7_EmployeeCommute(S3_BaseModel):
    """ 
    Each employee will file the expected travel distance from home to work. 
    If multiple modes were incurred during the process, suggest to file separately. 

    EMISSION FACTORS REQUIRED FROM BACKEND 
    1. travel_mode, vehicle, distance
    """
    branch: Optional[str] = Field(None, max_length=1600)
    
    employee_id: Optional[Union[str, int]] = Field(None, description='Optional identifier. Purpose is to track employees with multiple modes of travel. (They will file rail + car in separate entries)')
    travel_mode: str = Field(default='Land')
    vehicle_type: Optional[str] = Field(default='Car')

    distance_traveled: float = Field(default=1, ge=0)
    distance_unit: str = Field(default='km')
    distance_cadence: Optional[str] = Field(default='yearly', description='Specify if the distance is a daily, monthly, or yearly total')

    frequency: int = Field(default=1, description='Number of times this commuting mode is used')
    sampled_days: int = Field(default=260, description='Working days. 260 is the average number per year')

    @model_validator(mode='before')
    def validate_s3c7(cls, values):
        travel_mode = values.get('travel_mode')
        distance_unit = values.get('distance_unit')
        cadence = values.get('distance_cadence')

        # validate travel mode
        valid_travel_modes = ['foot', 'rail', 'land', 'air', 'water', None]
        if travel_mode is not None and travel_mode.lower() not in valid_travel_modes:
            raise ValueError(f'Invalid travel mode. Must be within {valid_travel_modes}')
        
        # validate distance unit
        supported_distance_unit = ['km', None]
        if distance_unit is None:
            values['distance_unit'] = 'km'
        elif distance_unit.lower() not in supported_distance_unit:
            raise ValueError(f'Invalid distance unit. Supported distance unit {supported_distance_unit}')
        
        # validate cadence
        supported_cadence = ['yearly', 'monthly', 'daily', None]
        if cadence is None:
            values['distance_cadence'] = 'yearly'
        elif cadence.lower() not in supported_cadence:
            raise ValueError(f'Invalid distance cadence. Supported cadence {supported_cadence}')

        return values


#-- Category 8 : Upstream leased assets
class S3C8_1_UpstreamLeasedEstate(S3_BaseModel):
    """ 
    Only applicable for companies using leased assets. 
    Owner company that rents to other people recorded in C13: Downstream Leased.
    Covered assets include: ONLY real estate with address

    ownership_share:
      Applicable for leased buildings with partial leased space. Divide bills by share. 

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. electric grid location >> electric use
    2. refrigerant type >> refrigerant use >> GWP
    """
    leased_asset_name: str
    leased_asset_type: str = Field(default='Real Estate')
    ownership_status: str = Field(default='Leased')
    ownership_share: Optional[float] = Field(default=1, ge=0, le=1, description='Applicable for leased buildings with limited floor space. Divide floor space from total for building.')
    
    address: Optional[str] = Field(None, description='Only applicable if rented asset is real estate. Not applicable for automobiles')
    state: Optional[str] = Field(None)
    country: Optional[str] = Field(default='Malaysia')
    lat: Optional[float] = Field(None, ge=-90, le=90)
    lon: Optional[float] = Field(None, ge=-180, le=180)

    electric_use: Optional[float] = Field(None, ge=0)
    grid_emission_factor: Optional[float] = Field(default=0.776, ge=0)

    refrigerant_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')

    reported_emissions: Optional[float] = Field(None, ge=0, description='Total emissions by lessor. If provided, will ignore energy / refrigerant values')

    @model_validator(mode='before')
    def validate_s3c8(cls, values):
        values['ownership_status'] = 'Leased'
        values['leased_asset_type'] = 'Real Estate'
        return values
    

class S3C8_2_UpstreamLeasedAuto(S3_BaseModel):
    """ 
    Only applicable for companies using leased assets. 
    Owner company that rents to other people recorded in C13: Downstream Leased.

    Covered assets include: automobile, heavy machine

    EMISSION FACTORS REQUIRED FROM BACKEND:
    1. fuel type, fuel use
    2. refrigerant type, use, GWP
    """
    leased_asset_name: str
    leased_asset_type: str = Field(default='Automobile')
    ownership_status: str = Field(default='Leased')

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_type: Optional[str] = Field(default='petrol', description='Supports only liquid fuels')
    fuel_unit: Optional[str] = Field(default='litre')

    refrigerant_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')

    reported_emissions: Optional[float] = Field(None, ge=0, description='Total emissions by lessor. If provided, will ignore energy / refrigerant values')

    @model_validator(mode='before')
    def validate_s3c8(cls, values):
        values['ownership_status'] = 'Leased'
        return values



#-- Category 9 : Downstream distribution of sold products
class S3C9_DownstreamTransport(S3_BaseModel):
    """ 
    Emissions that occur from transportation and distribution of sold products 
    in vehicles and facilities not owned or controlled by the reporting company.

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. energy_type >> energy_use
    2. vehicle_type >> freight_weight >> distance_traveled
    """
    distributor_name: Optional[str] = Field(default=None, description='Optional if you dont know the distributor')
    customer_name: Optional[str] = Field(default=None, description='Optional if you dont know the customer')
    
    travel_mode: str = Field(default='Land')
    freight_type: str = Field(default='Truck')
    freight_weight: Optional[float] = Field(ge=0, description='Weight in tons')

    #address_from: Optional[str] = Field(default=None) # Currently no way to infer distance reliably
    #address_to: Optional[str] = Field(default=None)

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_type: Optional[str] = Field(default='Diesel', description='Applicable to liquid fuel only')
    fuel_unit: Optional[str] = Field(default='litre')

    distance_traveled: Optional[float] = Field(None, ge=0)
    distance_unit: Optional[str] = Field(default='km')

    @model_validator(mode='before')
    def validate_s3c9(cls, values):
        travel_mode = values.get('travel_mode')
        distance_unit = values.get('distance_unit')

        # validate travel mode
        valid_travel_modes = ['rail', 'land', 'air', 'water', None]
        if travel_mode is not None and travel_mode.lower() not in valid_travel_modes:
            raise ValueError(f'Invalid travel mode. Must be within {valid_travel_modes}')
        
        # validate distance unit
        supported_distance_unit = ['km', None]
        if distance_unit is not None and distance_unit.lower() not in supported_distance_unit:
            raise ValueError(f'Invalid distance unit. Supported distance unit {supported_distance_unit}')
        
        return values



#-- Category 10 : Processing of sold products
class S3C10_ProcessingProducts(S3_BaseModel):
    """ 
    Slightly different from waste generated during operations. In C5, we record physical wastage of making product. 
    In C10, we record energy inputs required of making product.

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. fuel state, type, use
    2. refrigerant type, use, GWP
    """
    process_name: str 

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_state: Optional[str] = Field(default='liquid')
    fuel_type: Optional[str] = Field(default='Diesel')
    fuel_unit: Optional[str] = Field(default='litre')

    electric_use: Optional[float] = Field(None, ge=0)
    grid_emission_factor: Optional[float] = Field(default=0.776, ge=0)

    refrigerant_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')

    reported_emissions: Optional[float] = Field(None, ge=0, description='Total emissions from process. If provided, will ignore energy/refrigerant values')
    


#-- Category 11 : Use of sold products
class S3C11_UseOfSold(S3_BaseModel):
    """ 
    Applicable if a product sold is expected to have energy input from the consumer side. 

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. fuel state, type, use
    2. refrigerant type, use, GWP
    """
    product_name: str
    lifetime_usage_freq: int 
    number_sold: int

    fuel_per_use: Optional[float] = Field(None, ge=0)
    fuel_state: Optional[str] = Field(default='liquid')
    fuel_type: Optional[str] = Field(default='Diesel')
    fuel_unit: Optional[str] = Field(default='litre')

    electric_per_use: Optional[float] = Field(None, ge=0)
    grid_emission_factor: Optional[float] = Field(default=0.776, ge=0)

    refrigerant_per_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')



#-- Category 12 : End-of-life treatment of sold products
class S3C12_EOLTreatment(S3_BaseModel):
    """ 
    Waste created by consumers after product is sold.
    If there are multiple waste type created or treatment is not always the same, file separately. 

    EMISSION FACTORS REQUIRED FROM BACKEND:
    1. waste state, type, method, quantity
    """
    product_name: str

    waste_type: str = Field(default='plastic')
    waste_quantity: float = Field(ge=0)
    waste_state: str = Field(default='solid')
    waste_unit: str = Field(default='kg')
    waste_treatment_method: Optional[str] = Field(default='Recycled')
    waste_treatment_provider: Optional[str] = Field(None)



#-- Category 13 : Downstream leased assets
class S3C13_1_DownstreamLeasedEstate(S3_BaseModel):
    """ 
    Includes emissions from the operation of assets that are owned by the reporting company (acting as lessor) and leased to other entities
    in the reporting year that are not already included in scope 1 or scope 2. 

    A company may account for products leased to customers in the same way it accounts for products sold to customers 
    In this case, companies should report emissions from leased products in category 11 (Use of sold products), rather than category 13. 

    EMISSION FACTORS REQUIRED FROM BACKEND
    1. electric grid location >> electric use
    2. refrigerant type >> refrigerant use >> GWP
    """
    leased_asset_name: str
    leased_asset_type: str = Field(default='Real Estate')
    ownership_status: str = Field(default='Owned')

    address: Optional[str] = Field(None)
    state: Optional[str] = Field(None)
    country: Optional[str] = Field(default='Malaysia')
    lat: Optional[float] = Field(None, ge=-90, le=90)
    lon: Optional[float] = Field(None, ge=-180, le=180)

    electric_use: Optional[float] = Field(None, ge=0)
    grid_emission_factor: Optional[float] = Field(default=0.776, ge=0)

    refrigerant_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')

    reported_emissions: Optional[float] = Field(None, ge=0, description='Total emissions by lessor. If provided, will ignore energy/refrigerant values')   

    @model_validator(mode='before')
    def validate_s3c13(cls, values):
        values['ownership_status'] = 'Owned'
        return values
    

class S3C13_2_DownstreamLeasedAuto(S3_BaseModel):
    """ 
    Includes emissions from the operation of assets that are owned by the reporting company (acting as lessor) and leased to other entities
    in the reporting year that are not already included in scope 1 or scope 2. 

    A company may account for products leased to customers in the same way it accounts for products sold to customers 
    In this case, companies should report emissions from leased products in category 11 (Use of sold products), rather than category 13. 

    Covered assets include: automobile, heavy machine

    EMISSION FACTORS REQUIRED FROM BACKEND:
    1. fuel type, use
    2. refrigerant type, use, GWP
    """
    leased_asset_name: str
    leased_asset_type: str = Field(default='Automobile')
    ownership_status: str = Field(default='Owned')

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_type: Optional[str] = Field(default='petrol', description='Supports only liquid fuels')
    fuel_unit: Optional[str] = Field(default='litre')

    refrigerant_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')

    reported_emissions: Optional[float] = Field(None, ge=0, description='Total emissions by lessor. If provided, will ignore energy / refrigerant values')

    @model_validator(mode='before')
    def validate_s3c13(cls, values):
        values['ownership_status'] = 'Owned'
        return values

    

#-- Category 14 : Franchise
class S3C14_Franchise(S3_BaseModel):
    """ 
    EMISSION FACTORS REQUIRED FROM BACKEND:
    1. grid emission factor, electric use
    2. refrigerant type, use, GWP

    Building emissions currently not supported:
    1. Building emissions is hard to get
    2. We cannot know how much space the franchise is taking from building.
    """
    franchisee_id: str = Field(default='ABC-1')

    address: Optional[str] = Field(None)
    state: Optional[str] = Field(None)
    country: Optional[str] = Field(default='Malaysia')
    lat: Optional[float] = Field(None, ge=-90, le=90)
    lon: Optional[float] = Field(None, ge=-180, le=180)

    electric_use: Optional[float] = Field(None, ge=0)
    grid_emission_factor: Optional[float] = Field(default=0.776, ge=0)

    # floor_area: Optional[float] = Field(None, ge=0) # cannot reliably get building emissions
    # area_unit: Optional[str] = Field(default='m2')
    # building_emission_factor: Optional[float] = Field(None, ge=0)

    fuel_use: Optional[float] = Field(None, ge=0)
    fuel_state: Optional[str] = Field(default='liquid')
    fuel_type: Optional[str] = Field(default='Diesel')
    fuel_unit: Optional[str] = Field(default='litre')

    refrigerant_use: Optional[float] = Field(None, ge=0, description='In practice, this is more often to be leaked than "used".')
    refrigerant_type: Optional[str] = Field(default='R-410A', description='R-410-A is most common refrigerants. In practice, many refrigerants have mixed composites')
    refrigerant_unit: Optional[str] = Field(default='kg', description='GWP for refrigerants are typically measured by mass not volume.')

    reported_emissions: Optional[float] = Field(None, ge=0, description='Total emissions by franchisee. If provided, will ignore other fields.')


