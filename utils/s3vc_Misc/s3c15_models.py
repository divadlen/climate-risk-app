import uuid
from datetime import datetime
from dateutil import parser

from pydantic import BaseModel, Field
from pydantic import model_validator
from typing import Optional, Dict, List, Union, Tuple, ClassVar, Any


#-----------
# Issues
#----------
# 1. Possible for outstanding amount to be greater than debt, which doesnt make practical sense
# 2. 

# subsector, ccpt_rating # optional
# date_acquired, date_disposed
    


#---------------
# Input Class
#---------------
class S3C15_BaseAsset(BaseModel):
    uuid: str = Field(default_factory=lambda: str(uuid.uuid4()))
    date: Optional[Union[datetime, str]] = Field(None) 
    description: Optional[str]= Field(None, max_length=1600)

    @model_validator(mode='before')
    def validate_BaseAsset(cls, values):    
        date = values.get('date')
        if date is None:
            values['date'] = datetime.now().strftime('%Y-%m-%d')
        elif type(date) in [datetime]:
            values['date'] = date.strftime('%Y-%m-%d')
        else:
            try:
                parsed_date = parser.parse(date)
                values['date'] = parsed_date.strftime('%Y-%m-%d')
            except:
                raise ValueError('Invalid date format. Try inputing in YYYY-MM-DD')
        return values
            

#---Source of Financing---#
class S3C15_1_CorporateFinance(S3C15_BaseAsset):
    financial_type: str = 'Corporate Finance'
    company_name: str
    sector: str
    subsector: Optional[str] = None
    date_acquired: Optional[Union[datetime, str]] = Field(None)
    date_disposed: Optional[Union[datetime, str]] = Field(None)

    outstanding_amount: float = Field(ge=0, description='Market price times number of shares')
    currency: str = Field(default='USD')
    attribution_share: Optional[float] = Field(None, ge=0, le=1)
    reported_emissions: Optional[float] = Field(None, ge=0)
    estimated_emissions: Optional[float] = Field(None, ge=0)
    emission_estimation_description: Optional[str] = Field(None, max_length=1200, description='Reported, physical, economic, location proxy')

    @model_validator(mode='before')
    def validate_dates(cls, values):    
        date_fields = ['date_acquired', 'date_disposed']  # Specify which fields are date fields
        for key in date_fields:
            value = values.get(key)
            if value is None: 
                continue
            if isinstance(value, datetime):
                values[key] = value.strftime('%Y-%m-%d')
            else:
                try:
                    parsed_date = parser.parse(value)
                    values[key] = parsed_date.strftime('%Y-%m-%d')
                except:
                    raise ValueError(f'Invalid date format for {key}. Try inputting in YYYY-MM-DD')
        return values

        
        
class S3C15_2_ConsumerFinance(S3C15_BaseAsset):
    financial_type: str = 'Consumer Finance'
    outstanding_amount: float = Field(ge=0, description='Market price times number of shares')
    currency: str = Field(default='USD')
    attribution_share: Optional[float] = Field(None, ge=0, le= 1)
    reported_emissions: Optional[float] = Field(None, ge=0)
    estimated_emissions: Optional[float] = Field(None, ge=0)
    emission_estimation_description: Optional[str] = Field(None, max_length=1200, description='Reported, physical, economic, location proxy')

        
class S3C15_3_ProjectFinance(S3C15_BaseAsset):
    financial_type: str = 'Project Finance'
    company_name: str
    sector: str
    subsector: Optional[str] = None
    asset_class: str = None
    outstanding_amount: float = Field(ge=0, description='Market value of project')
    project_equity: Optional[float] = Field(None, ge=0)
    project_debt: Optional[float] = Field(None, ge=0)
    currency: str = Field(default='USD')
    attribution_share: Optional[float] = Field(None, ge=0, le=1)
    project_emissions: Optional[float] = Field(None, ge=0, description='Emission generated by project')
    estimated_emissions: Optional[float] = Field(None, ge=0)
    emission_estimation_description: Optional[str] = Field(None, max_length=1200, description='Reported, physical, economic, location proxy')

        
class S3C15_4_EmissionRemovals(S3C15_BaseAsset):
    """ 
    Emissions removals FOR PROJECT. 
    DO NOT be confused with "net removals" by company.
    """
    financial_type:str='Corporate Finance'
    company_name: str
    sector: str
    subsector: Optional[str] = None
    asset_class: str = 'Emission Removals'
    outstanding_amount: float = Field(ge=0, description='Market value of project')
    project_equity: Optional[float] = Field(None, ge=0)
    project_debt: Optional[float] = Field(None, ge=0)
    currency: str = Field(default='USD')
    attribution_share: Optional[float] = Field(None, ge=0, le=1)
    emissions_removed: Optional[float] = Field(None, ge=0)
    estimated_emissions: Optional[float] = Field(None, ge=0)
    emission_estimation_description: Optional[str] = Field(None, max_length=1200)


class S3C15_5_SovereignDebt(S3C15_BaseAsset):
    """ 
    Attribution share is derived either: Outstanding / Debt or outstanding / GDP
    GHGP recommends outstanding / GDP 
    """
    financial_type: str = 'Corporate Finance'  
    asset_class: str = 'Sovereign Debt'
    country_code: str = Field(default='MY', max_length=2, description='Alpha-2 country code')
    
    currency: str = Field(default='USD')
    outstanding_amount: float = Field(ge=0)
    total_government_debt: Optional[float] = Field(None, ge=0)
    PPP_adj_GDP: Optional[float] = Field(None, ge=0)
    
    attribution_share: Optional[float] = Field(None, ge=0, le=1)    
    reported_emissions: Optional[float] = Field(None, ge=0)
    estimated_emissions: Optional[float] = Field(None, ge=0)
    production_emissions: Optional[float] = Field(None)
    consumption_emissions: Optional[float] = Field(None)
    emission_estimation_description: Optional[str] = Field(None, max_length=1200, description='Reported, physical, economic, location proxy')


class S3C15_6_ManagedInvestments(S3C15_BaseAsset):
    """ 
    Managed investments and holdings for clients. More material for institutional clients.
    """
    financial_type: str = 'Corporate Finance'  
    asset_class: str = 'Managed Investments'

    customer_id: str = Field(description='Name of customer. EG: KWSP, Mr Lee, 324456, w345hgb81, robinhood_2')
    asset_name: str = Field(description='Name of asset. EG: TSLA, Project Gestalt, Subprime mortgage 1')
    sector: Optional[str] = None
    subsector: Optional[str] = None
    date_acquired: Optional[Union[datetime, str]] = Field(None)
    date_disposed: Optional[Union[datetime, str]] = Field(None)

    outstanding_amount: float = Field(ge=0, description='Market price times number of shares')
    total_equity: float = Field(ge=0)
    total_debt: float = Field(ge=0)
    currency: str = Field(default='USD')
    attribution_share: Optional[float] = Field(None, ge=0, le=1, description='Ownership percentage of CUSTOMER holding for ASSET_NAME.')
    reported_emissions: Optional[float] = Field(None, ge=0)
    estimated_emissions: Optional[float] = Field(None, ge=0)
    emission_estimation_description: Optional[str] = Field(None, max_length=1200, description='Reported, physical, economic, location proxy')
    

#---Asset Class---#   
class S3C15_1A_ListedEquity(S3C15_1_CorporateFinance):
    asset_class: str = 'Listed Equity'
    enterprise_value: float = Field(ge=0, description='Enterprise value plus cash')


class S3C15_1B_UnlistedEquity(S3C15_1_CorporateFinance):
    asset_class: str = 'Unlisted Equity'
    total_equity: float = Field(ge=0)
    total_debt: float = Field(ge=0)


class S3C15_1C_CorporateBonds(S3C15_1_CorporateFinance):
    asset_class: str = 'Corporate Bonds'
    total_equity: float = Field(ge=0)
    total_debt: float = Field(ge=0)
        
        
class S3C15_1D_BusinessLoans(S3C15_1_CorporateFinance):
    asset_class: str = 'Business Loans'
    is_listed: bool = Field(default=False)
    enterprise_value: Optional[float] = Field(ge=0, description='Enterprise value plus cash')
    total_equity: Optional[float] = Field(ge=0)
    total_debt: Optional[float] = Field(ge=0)


class S3C15_1E_CommercialRealEstate(S3C15_1_CorporateFinance):
    asset_class: str = 'Commercial Real Estate'
    property_value: Optional[float] = Field(None, ge=0, description='Land, building, renovations, refinance')
    value_at_origin: bool = Field(default=False)
        
    address: Optional[str]= Field(None)
    lat: Optional[float] = Field(None)
    lon: Optional[float] = Field(None)
    year_constructed: Optional[Union[int, datetime]] = Field(None)
    building_energy_use: Optional[float] = Field(None)
    building_emission_factor: Optional[float] = Field(None)


class S3C15_2A_Mortgage(S3C15_2_ConsumerFinance):
    asset_class: str = 'Mortgage'
    property_value: Optional[float] = Field(None, ge=0)
    value_at_origin: bool = Field(default=False)
        
    address: Optional[str]= Field(None)
    lat: Optional[float] = Field(None)
    lon: Optional[float] = Field(None)    
    building_energy_use: Optional[float] = Field(None)
    building_emission_factor: Optional[float] = Field(None)
    

class S3C15_2B_VehicleLoans(S3C15_2_ConsumerFinance):
    asset_class: str = 'Vehicle Loans'
    vehicle_type: str = Field(default='car')
    vehicle_value: float = Field(default=0)
    value_at_origin: bool = Field(default=True)
        
    distance_traveled: Optional[float] = Field(None)
    distance_emission_factor: Optional[float] = Field(None)


